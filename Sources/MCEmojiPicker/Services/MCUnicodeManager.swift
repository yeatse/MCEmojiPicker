// The MIT License (MIT)
//
// Copyright Â© 2022 Ivan Izyumkin
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import Foundation
import UIKit.UIDevice

/// Protocol for the `MCUnicodeManager`.
protocol MCUnicodeManagerProtocol {
    /// Returns categories with filtered emoji arrays that are available in the current version of iOS.
    func getEmojisForCurrentIOSVersion() -> [MCEmojiCategory]
}

extension MCEmojiCategoryType {
    var emojiCategoryTitle: String {
        NSLocalizedString(
            self.localizeKey,
            tableName: "MCEmojiPickerLocalizable",
            bundle: .module,
            comment: ""
        )
    }
}

/// The class is responsible for getting a relevant set of emojis for iOS version.
final class MCUnicodeManager: MCUnicodeManagerProtocol {
    
    /// The maximum number of frequently used emojis to include in the `frequentlyUsed` category.
    public let maxFrequentlyUsedEmojisCount: Int
    
    // MARK: - Initializers
    
    public init(maxFrequentlyUsedEmojis: Int = 30) {
        self.maxFrequentlyUsedEmojisCount = maxFrequentlyUsedEmojis
    }
    
    // MARK: - Public Methods
    
    /// Returns all emojis available for the current device's iOS version.
    func getEmojisForCurrentIOSVersion() -> [MCEmojiCategory] {
        let frequentlyUsedEmojis: MCEmojiCategory = .init(
            type: .frequentlyUsed,
            emojis: getFrequentlyUsedEmojis()
        )
        return [frequentlyUsedEmojis] + Self.defaultEmojis
    }
    
    // MARK: - Private Methods

    /// Returns the top n (`maxFrequentlyUsedEmojis`) emojis by usage, for emojis with a `usageCount` > 0.
    private func getFrequentlyUsedEmojis() -> [MCEmoji] {
        Array(
            Self.defaultEmojis
                .lazy
                .flatMap({ $0.emojis })
                .filter({ $0.usageCount > 0 })
                .sorted(by: { lhs, rhs in
                    let (aUsage, bUsage) = (lhs.usage, rhs.usage)
                    guard aUsage.count != bUsage.count else {
                        // Break ties with most recent usage
                        return lhs.lastUsage > rhs.lastUsage
                    }
                    return aUsage.count > bUsage.count
                })
                .prefix(maxFrequentlyUsedEmojisCount)
        )
    }

    // MARK: - Private Properties
    
    /// The maximum available emoji version for the current iOS version.
    private static let maxCurrentAvailableEmojiVersion: Double = {
        if #available(iOS 16.4, *) {
            return 15.0
        } else if #available(iOS 15.4, *) {
            return 14.0
        } else if #available(iOS 14.5, *) {
            return 13.1
        } else if #available(iOS 13.2, *) {
            return 12.0
        } else if #available(iOS 12.1, *) {
            return 11.0
        }
    }()

    /// Loads the emoji category from the type-specific JSON file in the resources directory.
    /// These files are generated by the MCEmojiPickerJSON target.
    static func emojis(for type: MCEmojiCategoryType) -> MCEmojiCategory {
        guard let file = Bundle.module.url(forResource: type.localizeKey, withExtension: "json") else {
            fatalError("Failed to load emoji resource")
        }
        let data = try! Data(contentsOf: file)
        var category = try! JSONDecoder().decode(MCEmojiCategory.self, from: data)
        category.emojis.removeAll { $0.version > Self.maxCurrentAvailableEmojiVersion }
        return category
    }

    static let defaultEmojis: [MCEmojiCategory] = [
        MCUnicodeManager.peopleEmojis,
        MCUnicodeManager.natureEmojis,
        MCUnicodeManager.foodAndDrinkEmojis,
        MCUnicodeManager.activityEmojis,
        MCUnicodeManager.travelAndPlacesEmojis,
        MCUnicodeManager.objectsEmojis,
        MCUnicodeManager.symbolsEmojis,
        MCUnicodeManager.flagsEmojis
    ]

    static let peopleEmojis = emojis(for: .people)
    static let natureEmojis = emojis(for: .nature)
    static let foodAndDrinkEmojis = emojis(for: .foodAndDrink)
    static let activityEmojis = emojis(for: .activity)
    static let travelAndPlacesEmojis = emojis(for: .travelAndPlaces)
    static let objectsEmojis = emojis(for: .objects)
    static let symbolsEmojis = emojis(for: .symbols)
    static let flagsEmojis = emojis(for: .flags)
}
